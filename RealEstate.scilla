(*Scilla version*)
scilla_version 0

(*Scilla Library*)
library RealEstate

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

type Error =
    | CodeNotOwner
    | CodeNotForSale
    | CodeInsufficientAmount
    | CodeNotPropertyOwner
    | CodePropertyExists
    | CodePropertyNotExists

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotOwner           => Int32 -1
      | CodeNotForSale         => Int32 -2
      | CodeInsufficientAmount => Int32 -3
      | CodeNotPropertyOwner   => Int32 -4
      | CodePropertyExists     => Int32 -5
      | CodePropertyNotExists  => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }

(*Contract Definition*)
contract RealEstate
(owner : ByStr20)

field properties : Map String ByStr20 
    = Emp String ByStr20

field sale : Map String Uint128
    = Emp String Uint128

(*Procedures*)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure TransferFunds(amount : Uint128, to : ByStr20)
  msg = { _tag : ""; _recipient : to; _amount : amount};
  transfer = one_msg msg;
  send transfer
end

procedure IsOwner()
    is_owner = builtin eq owner _sender;
    match is_owner with
        | True =>
        | False =>
            err = CodeNotOwner;
            ThrowError err
    end
end

procedure IsForSale(identifier : String)
    is_for_sale <- exists sale[identifier];
    match is_for_sale with
        | True =>
        | False =>
            err = CodeNotForSale;
            ThrowError err
    end
end

procedure IsAmountSufficient(identifier : String)
    amount <- sale[identifier];
    is_match = match amount with
        | Some amt => builtin eq amt _amount
        | None => False
        end;
    match is_match with
        | True =>
        | False =>
            err = CodeInsufficientAmount;
            ThrowError err
    end
end

procedure IsPropertyOwner(identifier : String)
    property_owner <- properties[identifier];
    is_match = match property_owner with
        | Some o => builtin eq o _sender
        | None => False
        end;
    match is_match with
        | True =>
        | False =>
            err = CodeNotPropertyOwner;
            ThrowError err
    end
end

procedure PropertyExists(identifier : String)
    property_exists <- exists properties[identifier];
    match property_exists with
        | True =>
        | False =>
            err = CodePropertyNotExists;
            ThrowError err
    end
end

procedure PropertyNotExists(identifier : String)
    property_exists <- exists properties[identifier];
    match property_exists with
        | False =>
        | True =>
            err = CodePropertyExists;
            ThrowError err
    end
end

(*Transitions*)
transition ListProperty(identifier : String, property_owner : ByStr20)
    IsOwner;
    PropertyNotExists identifier;
    properties[identifier] := property_owner;

    e = {_eventname: "PropertyListed"; property : identifier};
	event e
end

transition PurchaseProperty(identifier: String)
    IsForSale identifier;
    IsAmountSufficient identifier;

    accept;

    property_owner <- properties[identifier];
    addr = match property_owner with
        | Some o => o
        | None => owner
        end; 
    
    TransferFunds _amount addr;
    properties[identifier] := _sender;

    e = {_eventname: "PropertyPurchase"; property : identifier};
	event e
end

transition ListPropertyForSale(identifier : String, amount : Uint128)
    PropertyNotExists identifier;
    IsPropertyOwner identifier;
    sale[identifier] := amount;

    e = {_eventname: "PropertyForSale"; property : identifier; amount : amount};
	event e
end

transition UnlistPropertyForSale(identifier : String)
    PropertyExists identifier;
    IsPropertyOwner identifier;
    delete sale[identifier];

    e = {_eventname: "PropertyNotForSale"; property : identifier};
	event e
end

transition TransferPropertyTo(identifier : String, property_owner : ByStr20)
    PropertyExists identifier;
    IsPropertyOwner identifier;
    properties[identifier] := property_owner;

    e = {_eventname: "TransferProperty"; property : identifier};
	event e
end
